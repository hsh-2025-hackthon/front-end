openapi: 3.1.0
info:
  title: Collaborative Travel Planner API
  description: |-
    This is the API for the Collaborative Travel Planner application. It allows users to create, manage, and share travel itineraries. The API supports real-time collaboration features through WebSockets.
    Authentication is handled via JWT Bearer tokens obtained from Google OAuth.
  version: 1.0.0
servers:
  - url: /api
paths:
  /trips:
    get:
      summary: Get all trips for the user
      description: Retrieves a list of all trips associated with the authenticated user.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of trips.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Trip'
    post:
      summary: Create a new trip
      description: Creates a new trip with the provided details.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTrip'
      responses:
        '201':
          description: Trip created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trip'
  /trips/{tripId}:
    get:
      summary: Get a specific trip
      description: Retrieves the details of a single trip by its ID.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The requested trip.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trip'
    put:
      summary: Update a trip
      description: Updates the details of an existing trip.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTrip'
      responses:
        '200':
          description: The updated trip.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trip'
    delete:
      summary: Delete a trip
      description: Deletes a trip by its ID.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Trip deleted successfully.
  /trips/{tripId}/destinations:
    post:
      summary: Add a destination to a trip
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewDestination'
      responses:
        '201':
          description: Destination added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trip'
  /trips/{tripId}/destinations/{destinationId}:
    put:
      summary: Update a destination
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: destinationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewDestination'
      responses:
        '200':
          description: Destination updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trip'
    delete:
      summary: Remove a destination
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: destinationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Destination removed.
  /trips/{tripId}/collaborators:
    post:
      summary: Add a collaborator to a trip
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCollaborator'
      responses:
        '200':
          description: Collaborator added.
  /trips/{tripId}/collaborators/{userId}:
    delete:
      summary: Remove a collaborator from a trip
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Collaborator removed.
  /trips/{tripId}/route-plan:
    post:
      summary: Plan a route for a trip's destinations
      description: Calculates an optimized route based on a list of coordinates for a trip.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoutePlanRequest'
      responses:
        '200':
          description: Route plan successfully generated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoutePlanResponse'
        '400':
          description: Invalid route planning data.
  
  
  
  /users/me:
    get:
      summary: Get current user profile
      description: Retrieves the profile of the currently authenticated user.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user profile.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      summary: Update current user profile
      description: Updates the profile of the currently authenticated user.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '200':
          description: Updated user profile.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users:
    get:
      summary: Search users
      description: Search for users by name or email (for collaboration features).
      security:
        - bearerAuth: []
      parameters:
        - name: search
          in: query
          description: Search term to match against user names or emails
          schema:
            type: string
        - name: limit
          in: query
          description: Maximum number of results to return
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 20
        - name: offset
          in: query
          description: Number of results to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: List of users matching the search criteria.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PublicUser'
  /users/{id}:
    get:
      summary: Get user by ID
      description: Retrieves a user's public profile by their ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User's public profile.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUser'
  /collaboration/token/{tripId}:
    get:
      summary: Get a Web PubSub access token
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Web PubSub access token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebPubSubToken'
  /trips/{tripId}/members:
    post:
      summary: Add a member to a trip
      description: Adds a member to a trip.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                role:
                  type: string
                  enum: [member, admin]
      responses:
        '200':
          description: Member added successfully.
  /trips/{tripId}/members/{userId}:
    delete:
      summary: Remove a member from a trip
      description: Removes a member from a trip.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Member removed successfully.
  /trips/{tripId}/itinerary:
    get:
      summary: Get trip itinerary
      description: Retrieves the detailed itinerary for a trip.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Trip itinerary.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Itinerary'
  /trips/{tripId}/smart-cards:
    get:
      summary: Get smart itinerary cards
      description: Retrieves enriched itinerary cards with real-time data for a trip.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Smart itinerary cards with enriched data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  tripId:
                    type: string
                  totalCards:
                    type: integer
                  cards:
                    type: array
                    items:
                      $ref: '#/components/schemas/ItineraryCard'
                  generatedAt:
                    type: string
                    format: date-time
  /trips/{tripId}/smart-cards/{cardId}/refresh:
    post:
      summary: Refresh smart card data
      description: Refreshes enriched data for a specific itinerary card.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: cardId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Refreshed smart card data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  cardId:
                    type: string
                  card:
                    $ref: '#/components/schemas/ItineraryCard'
                  refreshedAt:
                    type: string
                    format: date-time
  /trips/{tripId}/smart-cards/summary:
    get:
      summary: Get smart cards summary
      description: Retrieves a summary of all smart cards for a trip with analytics.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Smart cards summary and analytics.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  tripId:
                    type: string
                  summary:
                    $ref: '#/components/schemas/SmartCardsSummary'
                  generatedAt:
                    type: string
                    format: date-time
  /trips/{tripId}/chat/rooms:
    get:
      summary: Get chat rooms for a trip
      description: Retrieves a list of chat rooms for a specific trip.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of chat rooms.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatRoom'
    post:
      summary: Create a new chat room
      description: Creates a new chat room for a trip.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        '201':
          description: Chat room created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatRoom'
  /chat/rooms/{roomId}:
    put:
      summary: Update a chat room
      description: Updates an existing chat room.
      security:
        - bearerAuth: []
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        '200':
          description: Chat room updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatRoom'
    delete:
      summary: Delete a chat room
      description: Deletes a chat room.
      security:
        - bearerAuth: []
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Chat room deleted successfully.
  /chat/rooms/{roomId}/messages:
    get:
      summary: Get messages from a chat room
      description: Retrieves messages from a specific chat room.
      security:
        - bearerAuth: []
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          description: Maximum number of messages to retrieve.
          schema:
            type: integer
        - name: offset
          in: query
          description: Offset for pagination.
          schema:
            type: integer
      responses:
        '200':
          description: List of chat messages.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatMessage'
    post:
      summary: Send a new message to a chat room
      description: Sends a new message to a chat room.
      security:
        - bearerAuth: []
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                message_type:
                  type: string
                  enum: [text, system, ai_suggestion, vote]
                metadata:
                  type: object
      responses:
        '201':
          description: Message sent successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessage'
  /chat/messages/{messageId}:
    put:
      summary: Edit an existing message
      description: Edits an existing message.
      security:
        - bearerAuth: []
      parameters:
        - name: messageId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
      responses:
        '200':
          description: Message updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessage'
    delete:
      summary: Delete a message
      description: Deletes a message.
      security:
        - bearerAuth: []
      parameters:
        - name: messageId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Message deleted successfully.
  /chat/rooms/{roomId}/members:
    get:
      summary: Get members in a chat room
      description: Retrieves a list of members in a chat room.
      security:
        - bearerAuth: []
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of chat room members.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatRoomMember'
    post:
      summary: Add a member to a chat room
      description: Adds a member to a chat room.
      security:
        - bearerAuth: []
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                role:
                  type: string
                  enum: [member, admin, viewer]
      responses:
        '200':
          description: Member added successfully.
  /chat/rooms/{roomId}/members/{userId}:
    delete:
      summary: Remove a member from a chat room
      description: Removes a member from a chat room.
      security:
        - bearerAuth: []
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Member removed successfully.
  /trips/{tripId}/votes:
    post:
      summary: Create a new vote for a trip
      description: Creates a new vote for a trip.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vote'
      responses:
        '201':
          description: Vote created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vote'
    get:
      summary: Get all votes for a trip
      description: Retrieves all active and past votes for a trip.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of votes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vote'
  /votes/{voteId}:
    get:
      summary: Get a specific vote
      description: Retrieves details of a specific vote.
      security:
        - bearerAuth: []
      parameters:
        - name: voteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Vote details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vote'
  /votes/{voteId}/responses:
    post:
      summary: Submit a user's response to a vote
      description: Submits a user's response to a vote.
      security:
        - bearerAuth: []
      parameters:
        - name: voteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VoteResponse'
      responses:
        '201':
          description: Vote response submitted successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoteResponse'
  /votes/{voteId}/results:
    get:
      summary: Get vote results
      description: Retrieves the current results of a vote.
      security:
        - bearerAuth: []
      parameters:
        - name: voteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Vote results.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoteResults'
  /trips/{tripId}/expenses:
    get:
      summary: Get all expenses for a trip
      description: Retrieves all expense records for a specific trip.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of expenses.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Expense'
    post:
      summary: Create a new expense record
      description: Creates a new expense record for a trip.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewExpense'
      responses:
        '201':
          description: Expense created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'
  /expenses/{expenseId}:
    put:
      summary: Update an expense record
      description: Updates an existing expense record.
      security:
        - bearerAuth: []
      parameters:
        - name: expenseId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewExpense'
      responses:
        '200':
          description: Expense updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'
    delete:
      summary: Delete an expense record
      description: Deletes an expense record.
      security:
        - bearerAuth: []
      parameters:
        - name: expenseId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Expense deleted successfully.
  /expenses/{expenseId}/receipt:
    post:
      summary: Upload a receipt image for OCR processing
      description: Uploads a receipt image for OCR processing and associates it with an expense.
      security:
        - bearerAuth: []
      parameters:
        - name: expenseId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Receipt processed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReceiptData'
  /trips/{tripId}/splits:
    get:
      summary: Get all split expense records for a trip
      description: Retrieves all split expense records for a trip.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of split expenses.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExpenseSplit'
  /expenses/{expenseId}/split:
    post:
      summary: Calculate and create split records for an expense
      description: Calculates and creates split records for a given expense.
      security:
        - bearerAuth: []
      parameters:
        - name: expenseId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                splitMethod:
                  type: string
                  enum: [equal, percentage, custom]
                participants:
                  type: array
                  items:
                    type: string
                splitData:
                  type: object
      responses:
        '201':
          description: Split records created successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExpenseSplit'
  /splits/{splitId}/status:
    put:
      summary: Update the status of a split record
      description: Updates the status of a specific split record (e.g., from 'pending' to 'paid').
      security:
        - bearerAuth: []
      parameters:
        - name: splitId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [pending, paid, cancelled]
      responses:
        '200':
          description: Split status updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpenseSplit'
  /trips/{tripId}/balances:
    get:
      summary: Get member balances for a trip
      description: Retrieves the current balances (who owes whom) for all members in a trip.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Member balances.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Balances'
  /trips/{tripId}/budget:
    get:
      summary: Get budget settings for a trip
      description: Retrieves the budget settings and current spending for a trip.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Budget details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Budget'
    put:
      summary: Update budget settings for a trip
      description: Updates the budget settings for a trip.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewBudget'
      responses:
        '200':
          description: Budget updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Budget'
  /trips/{tripId}/budget/alerts:
    get:
      summary: Get budget alerts for a trip
      description: Retrieves any active budget alerts for a trip (e.g., nearing limit).
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of budget alerts.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BudgetAlert'
  
  
  
  /mcp/weather:
    get:
      summary: Get weather data
      description: Retrieves weather data for a given location.
      security:
        - bearerAuth: []
      parameters:
        - name: location
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Weather data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeatherData'
  /mcp/exchange-rates:
    get:
      summary: Get exchange rates
      description: Retrieves current exchange rates between two currencies.
      security:
        - bearerAuth: []
      parameters:
        - name: from
          in: query
          required: true
          schema:
            type: string
        - name: to
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Exchange rate.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExchangeRate'
  /mcp/places/search:
    get:
      summary: Search for places
      description: Searches for places (attractions, restaurants, hotels) based on a query.
      security:
        - bearerAuth: []
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
        - name: location
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of places.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlaceData'
  /mcp/places/{placeId}/details:
    get:
      summary: Get place details
      description: Retrieves detailed information for a specific place.
      security:
        - bearerAuth: []
      parameters:
        - name: placeId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Place details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaceData'
  /mcp/routes/plan:
    post:
      summary: Plan a route between multiple locations
      description: Calculates an optimized route based on a list of coordinates.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoutePlanRequest'
      responses:
        '200':
          description: Route plan successfully generated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoutePlanResponse'
        '400':
          description: Invalid route planning data.
  /mcp/travel/recommendations:
    get:
      summary: Get travel recommendations
      description: Retrieves travel recommendations based on various criteria.
      security:
        - bearerAuth: []
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
        - name: type
          in: query
          schema:
            type: string
            enum: [attraction, restaurant, activity]
      responses:
        '200':
          description: List of travel recommendations.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TravelRecommendation'
  /mcp/travel/restaurants:
    get:
      summary: Get restaurant recommendations
      description: Retrieves restaurant recommendations for a given location.
      security:
        - bearerAuth: []
      parameters:
        - name: location
          in: query
          required: true
          schema:
            type: string
        - name: cuisine
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of restaurant recommendations.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RestaurantRecommendation'
  /mcp/travel/activities:
    get:
      summary: Get activity recommendations
      description: Retrieves activity recommendations for a given location and date.
      security:
        - bearerAuth: []
      parameters:
        - name: location
          in: query
          required: true
          schema:
            type: string
        - name: date
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: List of activity recommendations.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActivityRecommendation'
  /booking/flights/search:
    post:
      summary: Search for flight options
      description: Searches for flight options across multiple providers.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FlightSearchRequest'
      responses:
        '200':
          description: List of flight search results.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FlightSearchResult'
  /booking/hotels/search:
    post:
      summary: Search for hotel options
      description: Searches for hotel options across multiple providers.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HotelSearchRequest'
      responses:
        '200':
          description: List of hotel search results.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HotelSearchResult'
  /booking/{bookingId}/details:
    get:
      summary: Get booking details
      description: Retrieves details of a specific booking (flight or hotel).
      security:
        - bearerAuth: []
      parameters:
        - name: bookingId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Booking details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingDetails'
  /booking/{bookingId}/confirm:
    post:
      summary: Confirm a booking
      description: Confirms a booking. This might trigger a redirect to an external booking provider.
      security:
        - bearerAuth: []
      parameters:
        - name: bookingId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Booking confirmed.
        '302':
          description: Redirect to external booking provider.
  /booking/providers/status:
    get:
      summary: Get booking providers status
      description: Retrieves the health status and availability of all booking providers.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Booking providers status information.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  providers:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProviderStatus'
                  summary:
                    type: object
                    properties:
                      total:
                        type: integer
                      available:
                        type: integer
                      unavailable:
                        type: integer
  /booking/providers/health-check:
    post:
      summary: Trigger health check for all booking providers
      description: Forces a health check for all booking providers to verify their availability and connectivity.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Health check completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
        '500':
          description: Health check failed
  /booking/circuit-breakers/reset:
    post:
      summary: Reset all circuit breakers
      description: Resets all circuit breakers for booking providers, allowing failed providers to be retried.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Circuit breakers reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
        '500':
          description: Reset operation failed
  /booking/config:
    put:
      summary: Update booking service configuration
      description: Updates runtime configuration for the booking service, including failover and retry settings.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                enableFailover:
                  type: boolean
                  description: Enable or disable provider failover
                maxRetries:
                  type: integer
                  description: Maximum number of retry attempts (0-5)
                  minimum: 0
                  maximum: 5
      responses:
        '200':
          description: Configuration updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
        '400':
          description: Invalid configuration parameters
        '500':
          description: Configuration update failed
  /users/me/notifications:
    get:
      summary: Get all notifications for the user
      description: Retrieves all notifications for the authenticated user.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of notifications.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
  /notifications/{notificationId}/read:
    put:
      summary: Mark a notification as read
      description: Marks a specific notification as read.
      security:
        - bearerAuth: []
      parameters:
        - name: notificationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Notification marked as read.
  /users/me/notification-settings:
    put:
      summary: Update user notification settings
      description: Updates the notification settings for the authenticated user.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserNotificationSettings'
      responses:
        '200':
          description: Notification settings updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotificationSettings'
  
  /trips/{tripId}/quick-actions/add-destination:
    post:
      summary: Quickly add a destination to the trip itinerary
      description: Quickly adds a destination to the trip itinerary.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                destinationName:
                  type: string
                date:
                  type: string
                  format: date
      responses:
        '200':
          description: Destination added.
  /trips/{tripId}/quick-actions/split-expense:
    post:
      summary: Initiate an expense split for a trip
      description: Initiates an expense split for a trip.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                expenseId:
                  type: string
                method:
                  type: string
      responses:
        '200':
          description: Expense split initiated.
  /trips/{tripId}/quick-actions/get-weather:
    post:
      summary: Get current weather for the trip's destination
      description: Retrieves current weather for the trip's destination.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Weather data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeatherData'
  /trips/{tripId}/quick-actions/create-vote:
    post:
      summary: Quickly create a new vote in the trip's chat
      description: Quickly creates a new vote in the trip's chat.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                options:
                  type: array
                  items:
                    type: object
      responses:
        '201':
          description: Vote created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vote'
  /trips/{tripId}/agents/optimize-itinerary:
    post:
      summary: Trigger AI agents to optimize trip itinerary
      description: Orchestrates multiple AI agents to analyze requirements and optimize the trip itinerary based on chat messages and preferences.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                messages:
                  type: array
                  items:
                    type: object
                    description: Chat messages to analyze
                options:
                  type: object
                  properties:
                    prioritizeTime:
                      type: boolean
                    prioritizeCost:
                      type: boolean
                    prioritizeExperience:
                      type: boolean
                    generateAlternatives:
                      type: boolean
              required:
                - messages
      responses:
        '200':
          description: Itinerary optimization completed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentOptimizationResponse'
        '400':
          description: Invalid request data
        '404':
          description: Trip not found
        '500':
          description: Optimization failed
  /trips/{tripId}/agents/recommendations:
    post:
      summary: Request AI recommendations for a trip
      description: Requests AI recommendations (destinations, activities, general) based on trip context and user preferences.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum: [destination, activity, general]
                  description: Type of recommendation requested.
                context:
                  type: object
                  description: Additional context for recommendations (e.g., current location, dates).
                preferences:
                  type: object
                  description: User preferences to guide recommendations.
              required:
                - type
      responses:
        '200':
          description: List of AI-generated recommendations.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  recommendations:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                        type:
                          type: string
                        description:
                          type: string
                        score:
                          type: number
                          format: float
                        details:
                          type: object
  /trips/{tripId}/agents/analyze-requirements:
    post:
      summary: Analyze travel requirements from chat messages
      description: Uses AI agents to extract and analyze travel requirements from conversation messages.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                messages:
                  type: array
                  items:
                    type: object
      responses:
        '200':
          description: Extracted travel intentions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtractedInfo'
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                messages:
                  type: array
                  items:
                    type: object
                    description: Chat messages to analyze
              required:
                - messages
      responses:
        '200':
          description: Requirements analysis completed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentRequirementResponse'
  /trips/{tripId}/agents/adjust-plan:
    post:
      summary: Handle adaptive adjustments for trip disruptions
      description: Creates adjustment plans when disruptions occur during travel.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                disruption:
                  type: object
                  properties:
                    type:
                      type: string
                      enum: [weather, transportation, accommodation, activity_closure, emergency]
                    severity:
                      type: string
                      enum: [low, medium, high, critical]
                    affectedDestination:
                      type: string
                    affectedDate:
                      type: string
                      format: date
                    description:
                      type: string
                    suggestedActions:
                      type: array
                      items:
                        type: string
                  required:
                    - type
                    - severity
                    - description
              required:
                - disruption
      responses:
        '200':
          description: Adjustment plan created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentAdjustmentResponse'
  /trips/{tripId}/agents/status/{sessionId}:
    get:
      summary: Get agent session status
      description: Retrieves the current status of an AI agent workflow session.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Session status retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentSessionStatus'
        '404':
          description: Session not found
  /trips/{tripId}/agents/sessions/{sessionId}:
    delete:
      summary: Cancel an active agent session
      description: Cancels an active AI agent workflow session.
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Session cancelled successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  sessionId:
                    type: string
        '400':
          description: Session could not be cancelled
        '404':
          description: Session not found
  /agents/available:
    get:
      summary: Get available AI agents and their capabilities
      description: Returns a list of all available AI agents and their capabilities.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Available agents retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  agents:
                    type: array
                    items:
                      $ref: '#/components/schemas/AgentInfo'
                  totalAgents:
                    type: integer
                  generatedAt:
                    type: string
                    format: date-time
  /agents/sessions:
    get:
      summary: List all active agent sessions
      description: Returns a list of all active AI agent workflow sessions across all trips for the authenticated user.
      tags:
        - AI Agents
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Active sessions retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AgentSessionStatus'
        '500':
          description: Failed to retrieve sessions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /agents/sessions/{sessionId}:
    get:
      summary: Get detailed session information
      description: Retrieves detailed information about a specific AI agent session.
      tags:
        - AI Agents
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Session details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentSessionStatus'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Cancel an agent session
      description: Cancels an active AI agent workflow session.
      tags:
        - AI Agents
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Session cancelled successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Session cancelled successfully"
                  sessionId:
                    type: string
        '400':
          description: Session could not be cancelled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /agents/sessions/{sessionId}/results:
    get:
      summary: Get session results
      description: Retrieves the results from a completed AI agent session.
      tags:
        - AI Agents
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Session results retrieved successfully.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/AgentOptimizationResponse'
                  - $ref: '#/components/schemas/AgentRequirementResponse'
                  - $ref: '#/components/schemas/AgentAdjustmentResponse'
        '404':
          description: Session not found or no results available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Session still in progress
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /agents/sessions/{sessionId}/logs:
    get:
      summary: Get session execution logs
      description: Retrieves detailed execution logs and debugging information for a specific AI agent session.
      tags:
        - AI Agents
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
        - name: level
          in: query
          description: Filter logs by level (debug, info, warn, error)
          required: false
          schema:
            type: string
            enum: [debug, info, warn, error]
        - name: limit
          in: query
          description: Maximum number of log entries to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 100
        - name: offset
          in: query
          description: Number of log entries to skip
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Session logs retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  sessionId:
                    type: string
                  logs:
                    type: array
                    items:
                      $ref: '#/components/schemas/AgentSessionLog'
                  totalCount:
                    type: integer
                  hasMore:
                    type: boolean
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Insufficient permissions to access session logs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /trips/{tripId}/expenses/export/csv:
    get:
      summary: Generate and provide a CSV export of the trip's expense report
      description: |
        Generates and provides a CSV export of all expenses for a specific trip. 
        The CSV includes comprehensive expense data such as dates, amounts, categories, 
        payers, participants, and other relevant expense information.
        
        The response includes appropriate headers for file download with a timestamped filename.
      tags:
        - Expenses
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          description: The unique identifier of the trip
          schema:
            type: string
            format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: CSV file containing trip expense data
          headers:
            Content-Disposition:
              description: Attachment header with filename
              schema:
                type: string
                example: 'attachment; filename="trip-123e4567-expenses-2025-07-19.csv"'
            Content-Type:
              description: MIME type for CSV content
              schema:
                type: string
                example: 'text/csv'
          content:
            text/csv:
              schema:
                type: string
                format: binary
                description: |
                  CSV file containing expense data with columns:
                  Date, Title, Description, Amount, Currency, Base Amount, Base Currency,
                  Category, Subcategory, Payer, Created By, Split Method, Participants,
                  Status, Verification Status, Location, Tags
        '403':
          description: Access denied - User does not have access to this trip
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Trip not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /trips/{tripId}/versions:
    get:
      summary: Get trip version history
      description: Retrieves the complete version history for a trip, including all changes and revisions.
      tags:
        - Version Control
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
            maximum: 100
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: Version history retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  versions:
                    type: array
                    items:
                      $ref: '#/components/schemas/TripVersion'
                  totalVersions:
                    type: integer
                  hasMore:
                    type: boolean
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Trip not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /trips/{tripId}/versions/{versionId}/restore:
    post:
      summary: Restore trip to a previous version
      description: Restores the trip to a specific previous version, creating a new version in the process.
      tags:
        - Version Control
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: versionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Trip restored successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  newVersionId:
                    type: string
                    format: uuid
                  restoredTo:
                    type: string
                    format: uuid
                  message:
                    type: string
        '403':
          description: Access denied or insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Trip or version not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict - unable to restore due to recent changes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /trips/{tripId}/changes:
    get:
      summary: Get recent changes for a trip
      description: Retrieves recent changes and modifications made to the trip.
      tags:
        - Version Control
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: since
          in: query
          description: Only return changes since this timestamp
          schema:
            type: string
            format: date-time
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
      responses:
        '200':
          description: Recent changes retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  changes:
                    type: array
                    items:
                      $ref: '#/components/schemas/TripChange'
                  hasMore:
                    type: boolean
                  lastTimestamp:
                    type: string
                    format: date-time
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Trip not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /trips/{tripId}/permissions:
    get:
      summary: Get trip permission matrix
      description: Retrieves the detailed permission matrix for all members of the trip.
      tags:
        - Collaboration
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Permission matrix retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  permissions:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserPermissions'
                  defaultPermissions:
                    $ref: '#/components/schemas/PermissionSet'
        '403':
          description: Access denied - Admin permissions required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Trip not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /trips/{tripId}/members/{userId}/permissions:
    put:
      summary: Update detailed permissions for a trip member
      description: Updates the detailed permission settings for a specific trip member.
      tags:
        - Collaboration
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PermissionSet'
      responses:
        '200':
          description: Permissions updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  updatedPermissions:
                    $ref: '#/components/schemas/UserPermissions'
        '403':
          description: Access denied - Admin permissions required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Trip or user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /trips/{tripId}/conflicts:
    get:
      summary: Get current conflicts in trip data
      description: Retrieves any current data conflicts that need resolution in the CRDT system.
      tags:
        - Collaboration
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Conflicts retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  conflicts:
                    type: array
                    items:
                      $ref: '#/components/schemas/DataConflict'
                  conflictCount:
                    type: integer
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Trip not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /trips/{tripId}/conflicts/{conflictId}/resolve:
    post:
      summary: Resolve a data conflict
      description: Resolves a specific data conflict by choosing a resolution strategy.
      tags:
        - Collaboration
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: conflictId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                resolution:
                  type: string
                  enum: [accept_local, accept_remote, merge_custom]
                customData:
                  type: object
                  description: Required when resolution is 'merge_custom'
      responses:
        '200':
          description: Conflict resolved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  resolvedConflict:
                    $ref: '#/components/schemas/DataConflict'
        '400':
          description: Invalid resolution strategy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Trip or conflict not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /trips/{tripId}/timeline:
    get:
      summary: Get timeline data for Gantt chart visualization
      description: Retrieves structured timeline data suitable for Gantt chart rendering and project visualization.
      tags:
        - Visualization
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: granularity
          in: query
          description: Time granularity for the timeline
          schema:
            type: string
            enum: [hour, day, week]
            default: day
      responses:
        '200':
          description: Timeline data retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimelineData'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Trip not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /trips/{tripId}/map-data:
    get:
      summary: Get map visualization data
      description: Retrieves structured data for map visualization including markers, routes, and geographic information.
      tags:
        - Visualization
      security:
        - bearerAuth: []
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: includeRoutes
          in: query
          description: Whether to include route calculations
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: Map data retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MapVisualizationData'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Trip not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /health:
    get:
      summary: Get overall system health
      description: Returns the overall health status of the system including all services.
      tags:
        - Health Monitoring
      responses:
        '200':
          description: System is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '503':
          description: System is degraded or unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '500':
          description: Health check failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /health/services:
    get:
      summary: Get detailed service health
      description: Returns detailed health information for all monitored services.
      tags:
        - Health Monitoring
      responses:
        '200':
          description: Service health details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceHealthResponse'
        '500':
          description: Failed to get service health
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /health/services/{serviceName}:
    get:
      summary: Get health for a specific service
      description: Returns health status for a specific service by name.
      tags:
        - Health Monitoring
      parameters:
        - name: serviceName
          in: path
          required: true
          description: Name of the service to check (e.g., "Azure OpenAI", "MCP weather")
          schema:
            type: string
            example: "Azure OpenAI"
      responses:
        '200':
          description: Service health details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleServiceHealthResponse'
        '404':
          description: Service not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Failed to get service health
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /health/azure:
    get:
      summary: Get Azure services health
      description: Returns health status for all Azure-specific services.
      tags:
        - Health Monitoring
      responses:
        '200':
          description: Azure services are healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryHealthResponse'
        '503':
          description: Some Azure services are unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryHealthResponse'
        '500':
          description: Failed to get Azure service health
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /health/mcp:
    get:
      summary: Get MCP services health
      description: Returns health status for all Model Context Protocol (MCP) services.
      tags:
        - Health Monitoring
      responses:
        '200':
          description: MCP services are healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryHealthResponse'
        '503':
          description: Some MCP services are unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryHealthResponse'
        '500':
          description: Failed to get MCP service health
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /health/refresh:
    post:
      summary: Force refresh health checks
      description: Forces a refresh of all health checks, bypassing the cache.
      tags:
        - Health Monitoring
      responses:
        '200':
          description: Health checks refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthRefreshResponse'
        '500':
          description: Failed to refresh health checks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    TravelRecommendation:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        type:
          type: string
          enum: [attraction, restaurant, activity]
        location:
          type: string
        rating:
          type: number
          format: float
        imageUrl:
          type: string
          format: uri
    RestaurantRecommendation:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        cuisine:
          type: string
        address:
          type: string
        rating:
          type: number
          format: float
        priceRange:
          type: string
        imageUrl:
          type: string
          format: uri
    ActivityRecommendation:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        location:
          type: string
        date:
          type: string
          format: date
        time:
          type: string
          format: time
        price:
          type: number
          format: float
        imageUrl:
          type: string
          format: uri
    Trip:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        destination:
          type: string
        createdBy:
          type: string
          format: uuid
        status:
          type: string
          enum: [planning, active, completed]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    NewTrip:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
    Destination:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        location:
          type: object
          properties:
            latitude:
              type: number
            longitude:
              type: number
    NewDestination:
      type: object
      properties:
        name:
          type: string
        location:
          type: object
          properties:
            latitude:
              type: number
            longitude:
              type: number
    Collaborator:
      type: object
      properties:
        userId:
          type: string
        role:
          type: string
          enum: [editor, viewer]
    NewCollaborator:
      type: object
      properties:
        email:
          type: string
          format: email
        role:
          type: string
          enum: [editor, viewer]
    RoutePlanRequest:
      type: object
      required:
        - coordinates
      properties:
        coordinates:
          type: array
          description: Array of [longitude, latitude] pairs representing waypoints.
          items:
            type: array
            items:
              type: number
            minItems: 2
            maxItems: 2
        travelMode:
          type: string
          enum: [car, truck, taxi, bus, van, motorcycle, bicycle, pedestrian]
          default: car
          description: The mode of travel for route calculation.
    RoutePlanResponse:
      type: object
      properties:
        routes:
          type: array
          items:
            type: object
            properties:
              summary:
                type: object
                properties:
                  lengthInMeters:
                    type: number
                  travelTimeInSeconds:
                    type: number
                  trafficDelayInSeconds:
                    type: number
              legs:
                type: array
                items:
                  type: object
                  properties:
                    summary:
                      type: object
                      properties:
                        lengthInMeters:
                          type: number
                        travelTimeInSeconds:
                          type: number
                    points:
                      type: array
                      items:
                        type: object
                        properties:
                          latitude:
                            type: number
                          longitude:
                            type: number
    AIGenerateItineraryRequest:
      type: object
      properties:
        destination:
          type: string
        duration:
          type: integer
        budget:
          type: number
        interests:
          type: array
          items:
            type: string
        travelStyle:
          type: string
          enum: [budget, mid-range, luxury]
        groupSize:
          type: integer
    AIGeneratedItinerary:
      type: object
      # Define the schema for the AI-generated itinerary
    AIRecommendationsRequest:
      type: object
      properties:
        destination:
          type: string
        category:
          type: string
          enum: [restaurants, activities, accommodations, transportation]
        budget:
          type: number
        preferences:
          type: array
          items:
            type: string
    AIRecommendationsResponse:
      type: object
      # Define the schema for the AI-generated recommendations
    AIEnhancementsResponse:
      type: object
      # Define the schema for the AI-generated enhancements
    WebPubSubToken:
      type: object
      properties:
        token:
          type: string
        url:
          type: string
        expiresOn:
          type: string
          format: date-time
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
          format: email
        profilePictureUrl:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    PublicUser:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
        createdAt:
          type: string
          format: date-time
    UpdateUser:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
    ChatRoom:
      type: object
      properties:
        id:
          type: string
          format: uuid
        tripId:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    ChatMessage:
      type: object
      properties:
        id:
          type: string
          format: uuid
        roomId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        content:
          type: string
        messageType:
          type: string
          enum: [text, system, ai_suggestion, vote]
        metadata:
          type: object
        repliedTo:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    ChatRoomMember:
      type: object
      properties:
        roomId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        role:
          type: string
          enum: [admin, member, viewer]
        joinedAt:
          type: string
          format: date-time
        lastReadAt:
          type: string
          format: date-time
    Vote:
      type: object
      properties:
        id:
          type: string
          format: uuid
        tripId:
          type: string
          format: uuid
        chatMessageId:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        voteType:
          type: string
          enum: [destination, restaurant, activity, budget]
        options:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              description:
                type: string
        creatorId:
          type: string
          format: uuid
        deadline:
          type: string
          format: date-time
        status:
          type: string
          enum: [active, closed, cancelled]
        createdAt:
          type: string
          format: date-time
    VoteResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        voteId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        selectedOptions:
          type: array
          items:
            type: string
        comment:
          type: string
        createdAt:
          type: string
          format: date-time
    VoteResults:
      type: object
      properties:
        voteId:
          type: string
          format: uuid
        results:
          type: object
          additionalProperties:
            type: integer
    Expense:
      type: object
      properties:
        id:
          type: string
          format: uuid
        tripId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        title:
          type: string
        amount:
          type: number
          format: float
        currency:
          type: string
        amountBaseCurrency:
          type: number
          format: float
        category:
          type: string
          enum: [transportation, food, accommodation, activity, shopping, other]
        subcategory:
          type: string
        description:
          type: string
        receiptImageUrl:
          type: string
        receiptData:
          type: object
        location:
          type: object
        expenseDate:
          type: string
          format: date
        participants:
          type: array
          items:
            type: string
        splitMethod:
          type: string
          enum: [equal, percentage, custom, none]
        splitData:
          type: object
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    NewExpense:
      type: object
      properties:
        title:
          type: string
        amount:
          type: number
          format: float
        currency:
          type: string
        category:
          type: string
        expenseDate:
          type: string
          format: date
        participants:
          type: array
          items:
            type: string
        splitMethod:
          type: string
        splitData:
          type: object
    ReceiptData:
      type: object
      properties:
        merchant:
          type: string
        total:
          type: number
        currency:
          type: string
        date:
          type: string
          format: date
        items:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              quantity:
                type: number
              price:
                type: number
        tax:
          type: number
        confidence:
          type: number
    ExpenseSplit:
      type: object
      properties:
        id:
          type: string
          format: uuid
        expenseId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        amount:
          type: number
          format: float
        currency:
          type: string
        amountBaseCurrency:
          type: number
          format: float
        paidByUserId:
          type: string
          format: uuid
        status:
          type: string
          enum: [pending, paid, cancelled]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Balances:
      type: object
      additionalProperties:
        type: object
        properties:
          owes:
            type: string
            format: uuid
          amount:
            type: number
            format: float
    Budget:
      type: object
      properties:
        id:
          type: string
          format: uuid
        tripId:
          type: string
          format: uuid
        category:
          type: string
        totalAmount:
          type: number
          format: float
        currency:
          type: string
        spentAmount:
          type: number
          format: float
        alertThreshold:
          type: number
          format: float
        createdBy:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    NewBudget:
      type: object
      properties:
        category:
          type: string
        totalAmount:
          type: number
          format: float
        currency:
          type: string
        alertThreshold:
          type: number
          format: float
    BudgetAlert:
      type: object
      properties:
        type:
          type: string
        message:
          type: string
        currentAmount:
          type: number
        budgetLimit:
          type: number
    Itinerary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        tripId:
          type: string
          format: uuid
        days:
          type: array
          items:
            type: object
            properties:
              day:
                type: integer
              date:
                type: string
                format: date
              activities:
                type: array
                items:
                  type: object
                  properties:
                    time:
                      type: string
                    activity:
                      type: string
                    location:
                      type: object
                      properties:
                        name:
                          type: string
                        coordinates:
                          type: array
                          items:
                            type: number
                    cost:
                      type: number
                    currency:
                      type: string
    ExtractedInfo:
      type: object
      properties:
        destinations:
          type: array
          items:
            type: string
        dates:
          type: array
          items:
            type: string
            format: date
        budget:
          type: number
        interests:
          type: array
          items:
            type: string
        preferences:
          type: object
        mentions:
          type: object
    WeatherData:
      type: object
      properties:
        current:
          type: object
          properties:
            temperature:
              type: number
            humidity:
              type: number
            description:
              type: string
            icon:
              type: string
        forecast:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date
              maxTemp:
                type: number
              minTemp:
                type: number
              description:
                type: string
    ExchangeRate:
      type: object
      properties:
        from:
          type: string
        to:
          type: string
        rate:
          type: number
        timestamp:
          type: string
          format: date-time
    PlaceData:
      type: object
      properties:
        placeId:
          type: string
        name:
          type: string
        address:
          type: string
        coordinates:
          type: object
          properties:
            lat:
              type: number
            lng:
              type: number
        rating:
          type: number
        reviews:
          type: number
        photos:
          type: array
          items:
            type: string
        openingHours:
          type: array
          items:
            type: object
        priceLevel:
          type: number
        types:
          type: array
          items:
            type: string
    FlightSearchRequest:
      type: object
      properties:
        origin:
          type: string
        destination:
          type: string
        departureDate:
          type: string
          format: date
        returnDate:
          type: string
          format: date
        passengers:
          type: integer
        class:
          type: string
          enum: [economy, business, first]
        budget:
          type: number
    FlightSearchResult:
      type: object
      properties:
        id:
          type: string
        airline:
          type: string
        flightNumber:
          type: string
        departureTime:
          type: string
          format: date-time
        arrivalTime:
          type: string
          format: date-time
        price:
          type: number
        currency:
          type: string
        bookingUrl:
          type: string
    HotelSearchRequest:
      type: object
      properties:
        destination:
          type: string
        checkIn:
          type: string
          format: date
        checkOut:
          type: string
          format: date
        rooms:
          type: integer
        guests:
          type: integer
        budget:
          type: number
        amenities:
          type: array
          items:
            type: string
    HotelSearchResult:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        address:
          type: string
        rating:
          type: number
        price:
          type: number
        currency:
          type: string
        bookingUrl:
          type: string
    BookingDetails:
      type: object
      properties:
        bookingId:
          type: string
        type:
          type: string
          enum: [flight, hotel]
        status:
          type: string
        details:
          type: object
    Notification:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        tripId:
          type: string
          format: uuid
        type:
          type: string
        title:
          type: string
        body:
          type: string
        data:
          type: object
        channels:
          type: array
          items:
            type: string
        status:
          type: string
          enum: [pending, sent, failed, read]
        scheduledAt:
          type: string
          format: date-time
        sentAt:
          type: string
          format: date-time
        readAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
    UserNotificationSettings:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        notificationType:
          type: string
        enabled:
          type: boolean
        channels:
          type: array
          items:
            type: string
        advanceMinutes:
          type: integer
    RecommendedDestination:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        rating:
          type: number
        imageUrl:
          type: string
    RecommendedActivity:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        type:
          type: string
        cost:
          type: number
        currency:
          type: string
        imageUrl:
          type: string
    # Health Monitoring Schemas
    ServiceHealth:
      type: object
      properties:
        service:
          type: string
          description: Name of the service
          example: "Azure OpenAI"
        status:
          type: string
          enum: [healthy, unhealthy, unknown]
          description: Current health status of the service
          example: "healthy"
        message:
          type: string
          description: Additional information about the service status
          example: "Service is operational"
        responseTime:
          type: number
          description: Response time in milliseconds
          example: 245
        timestamp:
          type: string
          format: date-time
          description: When the health check was performed
          example: "2025-07-19T12:00:00.000Z"
      required:
        - service
        - status
        - timestamp
    HealthSummary:
      type: object
      properties:
        total:
          type: number
          description: Total number of services monitored
          example: 10
        healthy:
          type: number
          description: Number of healthy services
          example: 8
        unhealthy:
          type: number
          description: Number of unhealthy services
          example: 2
        unknown:
          type: number
          description: Number of services with unknown status
          example: 0
      required:
        - total
        - healthy
        - unhealthy
        - unknown
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, unknown, error]
          description: Overall system health status
          example: "healthy"
        timestamp:
          type: string
          format: date-time
          description: When the health check was performed
          example: "2025-07-19T12:00:00.000Z"
        version:
          type: string
          description: Application version
          example: "1.0.0"
        summary:
          $ref: '#/components/schemas/HealthSummary'
        services:
          type: array
          items:
            $ref: '#/components/schemas/ServiceHealth'
          description: Health status of all monitored services
      required:
        - status
        - timestamp
        - version
        - summary
        - services
    ServiceHealthResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          description: When the health check was performed
          example: "2025-07-19T12:00:00.000Z"
        services:
          type: array
          items:
            $ref: '#/components/schemas/ServiceHealth'
          description: Health status of all monitored services
      required:
        - timestamp
        - services
    SingleServiceHealthResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          description: When the health check was performed
          example: "2025-07-19T12:00:00.000Z"
        service:
          $ref: '#/components/schemas/ServiceHealth'
      required:
        - timestamp
        - service
    CategoryHealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, unknown]
          description: Overall status for this service category
          example: "healthy"
        timestamp:
          type: string
          format: date-time
          description: When the health check was performed
          example: "2025-07-19T12:00:00.000Z"
        summary:
          $ref: '#/components/schemas/HealthSummary'
        services:
          type: array
          items:
            $ref: '#/components/schemas/ServiceHealth'
          description: Health status of services in this category
      required:
        - status
        - timestamp
        - summary
        - services
    HealthRefreshResponse:
      type: object
      properties:
        message:
          type: string
          description: Confirmation message
          example: "Health checks refreshed"
        timestamp:
          type: string
          format: date-time
          description: When the refresh was performed
          example: "2025-07-19T12:00:00.000Z"
        summary:
          $ref: '#/components/schemas/HealthSummary'
        services:
          type: array
          items:
            $ref: '#/components/schemas/ServiceHealth'
          description: Updated health status of all services
      required:
        - message
        - timestamp
        - summary
        - services
    ItineraryCard:
      type: object
      properties:
        id:
          type: string
        tripId:
          type: string
        type:
          type: string
          enum: [destination, activity, transport, accommodation, meal]
        title:
          type: string
        description:
          type: string
        basicInfo:
          type: object
          properties:
            date:
              type: string
              format: date-time
            startTime:
              type: string
            endTime:
              type: string
            duration:
              type: string
            location:
              type: object
              properties:
                name:
                  type: string
                address:
                  type: string
                coordinates:
                  type: object
                  properties:
                    lat:
                      type: number
                    lng:
                      type: number
            status:
              type: string
              enum: [planned, confirmed, completed, cancelled]
        enrichedData:
          type: object
          properties:
            weather:
              type: object
              properties:
                current:
                  type: object
                  properties:
                    temperature:
                      type: number
                    condition:
                      type: string
                    icon:
                      type: string
                    humidity:
                      type: number
                    windSpeed:
                      type: number
                recommendation:
                  type: string
            pricing:
              type: object
              properties:
                exchangeRate:
                  type: object
                  properties:
                    localCurrency:
                      type: string
                    rate:
                      type: number
                    convertedPrice:
                      type: number
                    baseCurrency:
                      type: string
            transport:
              type: object
              properties:
                toLocation:
                  type: object
                  properties:
                    method:
                      type: string
                    duration:
                      type: string
                    distance:
                      type: string
            operatingHours:
              type: object
              properties:
                today:
                  type: object
                  properties:
                    open:
                      type: string
                    close:
                      type: string
                    isOpen:
                      type: boolean
            lastUpdated:
              type: string
              format: date-time
        actions:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              type:
                type: string
                enum: [navigation, booking, sharing, modification, information]
              label:
                type: string
              action:
                type: string
              enabled:
                type: boolean
        metadata:
          type: object
          properties:
            priority:
              type: string
              enum: [low, medium, high]
            tags:
              type: array
              items:
                type: string
            createdBy:
              type: string
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time
    SmartCardsSummary:
      type: object
      properties:
        totalCards:
          type: integer
        cardsByType:
          type: object
          additionalProperties:
            type: integer
        cardsByStatus:
          type: object
          additionalProperties:
            type: integer
        upcomingCards:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              title:
                type: string
              date:
                type: string
                format: date-time
              startTime:
                type: string
              type:
                type: string
        alertsCount:
          type: integer
        dataFreshness:
          type: object
          properties:
            oldest:
              type: number
            newest:
              type: number
            averageAge:
              type: number
    ProviderStatus:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
          enum: [flight, hotel, activity]
        available:
          type: boolean
        lastChecked:
          type: string
          format: date-time
      required:
        - name
        - type
        - available
        - lastChecked
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: "Service not found"
        message:
          type: string
          description: Detailed error description
          example: "The requested service could not be found"
      required:
        - error
    # AI Agent Schemas
    AgentOptimizationResponse:
      type: object
      properties:
        success:
          type: boolean
        sessionId:
          type: string
        requirements:
          $ref: '#/components/schemas/TravelRequirements'
        itinerary:
          $ref: '#/components/schemas/OptimizedItinerary'
        alternatives:
          type: array
          items:
            $ref: '#/components/schemas/OptimizedItinerary'
        confidence:
          type: number
          format: float
          minimum: 0
          maximum: 1
        processingTime:
          type: number
          description: Processing time in milliseconds
        recommendations:
          type: array
          items:
            type: string
        warnings:
          type: array
          items:
            type: string
        generatedAt:
          type: string
          format: date-time
    AgentRequirementResponse:
      type: object
      properties:
        success:
          type: boolean
        sessionId:
          type: string
        requirements:
          $ref: '#/components/schemas/TravelRequirements'
        confidence:
          type: number
          format: float
          minimum: 0
          maximum: 1
        processingTime:
          type: number
          description: Processing time in milliseconds
        recommendations:
          type: array
          items:
            type: string
        warnings:
          type: array
          items:
            type: string
        generatedAt:
          type: string
          format: date-time
    AgentAdjustmentResponse:
      type: object
      properties:
        success:
          type: boolean
        sessionId:
          type: string
        disruption:
          $ref: '#/components/schemas/DisruptionEvent'
        originalItinerary:
          $ref: '#/components/schemas/OptimizedItinerary'
        adjustedItinerary:
          $ref: '#/components/schemas/OptimizedItinerary'
        impactAnalysis:
          type: object
          properties:
            affectedDays:
              type: integer
            costImpact:
              type: number
            experienceImpact:
              type: number
        alternatives:
          type: array
          items:
            $ref: '#/components/schemas/OptimizedItinerary'
        recommendations:
          type: array
          items:
            type: string
        generatedAt:
          type: string
          format: date-time
    AgentSessionStatus:
      type: object
      properties:
        sessionId:
          type: string
        tripId:
          type: string
          format: uuid
        status:
          type: string
          enum: [active, completed, failed, cancelled]
        currentStep:
          type: string
        progress:
          type: integer
          minimum: 0
          maximum: 100
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        errors:
          type: array
          items:
            type: string
        hasResults:
          type: boolean
    AgentSessionLog:
      type: object
      properties:
        id:
          type: string
          description: Unique log entry identifier
        timestamp:
          type: string
          format: date-time
          description: When the log entry was created
        level:
          type: string
          enum: [debug, info, warn, error]
          description: Log level indicating severity
        message:
          type: string
          description: Human-readable log message
        component:
          type: string
          description: Component or agent that generated the log
          example: "RequirementAnalysisAgent"
        step:
          type: string
          description: Current processing step when log was generated
          example: "extracting_travel_preferences"
        metadata:
          type: object
          description: Additional structured data related to the log entry
          additionalProperties: true
        error:
          type: object
          description: Error details if this is an error log
          properties:
            code:
              type: string
            stack:
              type: string
            details:
              type: object
              additionalProperties: true
    AgentInfo:
      type: object
      properties:
        name:
          type: string
        metadata:
          type: object
          properties:
            name:
              type: string
            version:
              type: string
            capabilities:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                  description:
                    type: string
                  inputSchema:
                    type: object
                  outputSchema:
                    type: object
    TravelRequirements:
      type: object
      properties:
        destinations:
          type: array
          items:
            type: string
        budget:
          type: object
          properties:
            total:
              type: number
            currency:
              type: string
            categories:
              type: object
        dates:
          type: object
          properties:
            startDate:
              type: string
              format: date
            endDate:
              type: string
              format: date
            duration:
              type: integer
            flexibility:
              type: string
              enum: [rigid, flexible, very_flexible]
        preferences:
          type: object
        groupDynamics:
          type: object
          properties:
            size:
              type: integer
            interests:
              type: array
              items:
                type: string
        priorities:
          type: object
          properties:
            primary:
              type: array
              items:
                type: string
            secondary:
              type: array
              items:
                type: string
        sentiment:
          type: object
          properties:
            overall:
              type: string
              enum: [positive, neutral, negative]
            excitement:
              type: number
              format: float
            consensus:
              type: number
              format: float
        confidence:
          type: number
          format: float
          minimum: 0
          maximum: 1
    OptimizedItinerary:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        totalCost:
          type: number
        currency:
          type: string
        duration:
          type: integer
        destinations:
          type: array
          items:
            type: object
        dailyPlans:
          type: array
          items:
            type: object
        transportation:
          type: array
          items:
            type: object
        budgetBreakdown:
          type: object
          properties:
            accommodation:
              type: number
            transportation:
              type: number
            activities:
              type: number
            food:
              type: number
            miscellaneous:
              type: number
        optimizationScore:
          type: number
          format: float
          minimum: 0
          maximum: 1
    DisruptionEvent:
      type: object
      properties:
        type:
          type: string
          enum: [weather, transportation, accommodation, activity_closure, emergency]
        severity:
          type: string
          enum: [low, medium, high, critical]
        affectedDestination:
          type: string
        affectedDate:
          type: string
          format: date
        description:
          type: string
        suggestedActions:
          type: array
          items:
            type: string
    # Version Control Schemas
    TripVersion:
      type: object
      properties:
        id:
          type: string
          format: uuid
        tripId:
          type: string
          format: uuid
        versionNumber:
          type: integer
        createdBy:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        changes:
          type: array
          items:
            $ref: '#/components/schemas/TripChange'
        summary:
          type: string
        tags:
          type: array
          items:
            type: string
        dataSnapshot:
          type: object
          description: Complete trip data at this version
    TripChange:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        userName:
          type: string
        changeType:
          type: string
          enum: [create, update, delete, restore]
        entityType:
          type: string
          enum: [trip, destination, itinerary, expense, vote, chat_message, member]
        entityId:
          type: string
        fieldName:
          type: string
        oldValue:
          type: object
        newValue:
          type: object
        timestamp:
          type: string
          format: date-time
        description:
          type: string
        impact:
          type: string
          enum: [low, medium, high]
    # Collaboration Schemas
    UserPermissions:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        userName:
          type: string
        role:
          type: string
          enum: [owner, admin, editor, viewer]
        permissions:
          $ref: '#/components/schemas/PermissionSet'
        grantedBy:
          type: string
          format: uuid
        grantedAt:
          type: string
          format: date-time
        lastActive:
          type: string
          format: date-time
    PermissionSet:
      type: object
      properties:
        canEditTrip:
          type: boolean
          default: false
        canEditItinerary:
          type: boolean
          default: false
        canManageExpenses:
          type: boolean
          default: false
        canCreateVotes:
          type: boolean
          default: false
        canManageMembers:
          type: boolean
          default: false
        canDeleteContent:
          type: boolean
          default: false
        canExportData:
          type: boolean
          default: false
        canManageBookings:
          type: boolean
          default: false
        canAccessAnalytics:
          type: boolean
          default: false
        canModeratChat:
          type: boolean
          default: false
        granularPermissions:
          type: object
          properties:
            destinations:
              type: object
              properties:
                create:
                  type: boolean
                edit:
                  type: boolean
                delete:
                  type: boolean
            activities:
              type: object
              properties:
                create:
                  type: boolean
                edit:
                  type: boolean
                delete:
                  type: boolean
            expenses:
              type: object
              properties:
                viewAll:
                  type: boolean
                editOwn:
                  type: boolean
                editAll:
                  type: boolean
                approveSettlements:
                  type: boolean
    DataConflict:
      type: object
      properties:
        id:
          type: string
        entityType:
          type: string
          enum: [trip, destination, itinerary, expense, vote]
        entityId:
          type: string
        fieldName:
          type: string
        conflictType:
          type: string
          enum: [concurrent_edit, delete_conflict, dependency_conflict]
        localValue:
          type: object
        remoteValue:
          type: object
        lastModifiedBy:
          type: array
          items:
            type: object
            properties:
              userId:
                type: string
                format: uuid
              timestamp:
                type: string
                format: date-time
        suggestedResolution:
          type: string
          enum: [accept_local, accept_remote, merge_custom]
        priority:
          type: string
          enum: [low, medium, high, critical]
        createdAt:
          type: string
          format: date-time
    # Visualization Schemas
    TimelineData:
      type: object
      properties:
        tripId:
          type: string
          format: uuid
        timeframe:
          type: object
          properties:
            start:
              type: string
              format: date-time
            end:
              type: string
              format: date-time
            duration:
              type: integer
              description: Duration in days
        tasks:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              type:
                type: string
                enum: [travel, accommodation, activity, meal, free_time]
              start:
                type: string
                format: date-time
              end:
                type: string
                format: date-time
              duration:
                type: integer
                description: Duration in minutes
              dependencies:
                type: array
                items:
                  type: string
                  description: IDs of dependent tasks
              status:
                type: string
                enum: [planned, confirmed, in_progress, completed, cancelled]
              progress:
                type: integer
                minimum: 0
                maximum: 100
              location:
                type: object
                properties:
                  name:
                    type: string
                  coordinates:
                    type: array
                    items:
                      type: number
              cost:
                type: number
              currency:
                type: string
              assignedTo:
                type: array
                items:
                  type: string
                  format: uuid
              priority:
                type: string
                enum: [low, medium, high]
              tags:
                type: array
                items:
                  type: string
        milestones:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              date:
                type: string
                format: date-time
              type:
                type: string
                enum: [departure, arrival, checkpoint, deadline]
              status:
                type: string
                enum: [upcoming, reached, missed]
        criticalPath:
          type: array
          items:
            type: string
            description: Task IDs that form the critical path
        generatedAt:
          type: string
          format: date-time
    MapVisualizationData:
      type: object
      properties:
        tripId:
          type: string
          format: uuid
        bounds:
          type: object
          properties:
            northeast:
              type: object
              properties:
                lat:
                  type: number
                lng:
                  type: number
            southwest:
              type: object
              properties:
                lat:
                  type: number
                lng:
                  type: number
        markers:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              type:
                type: string
                enum: [destination, accommodation, activity, restaurant, transport_hub, custom]
              coordinates:
                type: object
                properties:
                  lat:
                    type: number
                  lng:
                    type: number
              title:
                type: string
              description:
                type: string
              date:
                type: string
                format: date-time
              status:
                type: string
                enum: [planned, confirmed, visited, cancelled]
              metadata:
                type: object
                properties:
                  address:
                    type: string
                  rating:
                    type: number
                  priceLevel:
                    type: integer
                  category:
                    type: string
                  photos:
                    type: array
                    items:
                      type: string
              clustering:
                type: object
                properties:
                  groupId:
                    type: string
                  groupName:
                    type: string
        routes:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              waypoints:
                type: array
                items:
                  type: object
                  properties:
                    lat:
                      type: number
                    lng:
                      type: number
                    name:
                      type: string
                    order:
                      type: integer
              travelMode:
                type: string
                enum: [driving, walking, transit, cycling]
              distance:
                type: number
                description: Distance in meters
              duration:
                type: number
                description: Duration in seconds
              polyline:
                type: string
                description: Encoded polyline for route visualization
              date:
                type: string
                format: date
              status:
                type: string
                enum: [planned, active, completed]
        heatmapData:
          type: array
          items:
            type: object
            properties:
              lat:
                type: number
              lng:
                type: number
              weight:
                type: number
                description: Activity intensity at this location
        layers:
          type: object
          properties:
            showTransport:
              type: boolean
            showAccommodation:
              type: boolean
            showActivities:
              type: boolean
            showRestaurants:
              type: boolean
            showRoutes:
              type: boolean
            showHeatmap:
              type: boolean
        generatedAt:
          type: string
          format: date-time
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT